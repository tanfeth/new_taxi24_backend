// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Taxi24.Infra.Data;

#nullable disable

namespace Taxi24.Infra.Migrations
{
    [DbContext(typeof(StoreContext))]
    [Migration("20240330204047_AddRejectedTemplateAndReminderTemplates2")]
    partial class AddRejectedTemplateAndReminderTemplates2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Taxi24.Core.Entity.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccountOwnerName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Bank")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("IBAN")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ModificationUser")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CarCollor")
                        .HasColumnType("longtext");

                    b.Property<string>("CarDetailsState")
                        .HasColumnType("longtext");

                    b.Property<string>("CarInssurance")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CarInssuranceExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CarInssuranceModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("CarInssuranceState")
                        .HasColumnType("longtext");

                    b.Property<string>("CarModel")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CarRegistration")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CarRegistrationExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CarRegistrationModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("CarRegistrationState")
                        .HasColumnType("longtext");

                    b.Property<int?>("CarSeatType")
                        .HasColumnType("int");

                    b.Property<string>("CarType")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("CarYear")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreationUser")
                        .HasColumnType("int");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<string>("Eligibility")
                        .HasColumnType("longtext");

                    b.Property<string>("EligibilityExpiryDate")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ModificationUser")
                        .HasColumnType("int");

                    b.Property<string>("PlateLetterLeft")
                        .HasColumnType("longtext");

                    b.Property<string>("PlateLetterMiddle")
                        .HasColumnType("longtext");

                    b.Property<string>("PlateLetterRight")
                        .HasColumnType("longtext");

                    b.Property<string>("PlateNo")
                        .HasColumnType("longtext");

                    b.Property<string>("PlateType")
                        .HasColumnType("longtext");

                    b.Property<string>("RejectionReasons")
                        .HasColumnType("longtext");

                    b.Property<string>("SequenceNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("VehicleLicenseExpiryDate")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CarInssuranceModifiedBy");

                    b.HasIndex("CarRegistrationModifiedBy");

                    b.HasIndex("DriverId");

                    b.ToTable("Car");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CardBrand")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreationUser")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ModificationUser")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Card");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreationUser")
                        .HasColumnType("int");

                    b.Property<string>("DriverNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Eligibility")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LicenceExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("License")
                        .HasColumnType("longtext");

                    b.Property<string>("LicenseImageState")
                        .HasColumnType("longtext");

                    b.Property<int?>("LicenseStatusBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ModificationUser")
                        .HasColumnType("int");

                    b.Property<int>("RejectedOrdersCount")
                        .HasColumnType("int");

                    b.Property<string>("SaudiId")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("SaudiIdExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SaudiIdImageState")
                        .HasColumnType("longtext");

                    b.Property<int?>("SaudiIdModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TripId")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<double>("WorkingHoursInMin")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("LicenseStatusBy");

                    b.HasIndex("SaudiIdModifiedBy");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Driver");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.Favirote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreationUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ModificationUser")
                        .HasColumnType("int");

                    b.Property<string>("PlaceId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Favirote");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreationUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ModificationUser")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.GroupPermissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("PermissionId");

                    b.ToTable("GroupPermissions");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreationUser")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ModificationUser")
                        .HasColumnType("int");

                    b.Property<string>("OrignalDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OrignalSecondaryText")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PlaceId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SecondaryText")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreationUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("RoleEnum")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.NotificationMessages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BodyAr")
                        .HasColumnType("longtext");

                    b.Property<string>("BodyEn")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreationUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("NotificationName")
                        .HasColumnType("int");

                    b.Property<string>("TitleAr")
                        .HasColumnType("longtext");

                    b.Property<string>("TitleEn")
                        .HasColumnType("longtext");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationMessages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BodyAr = "سوف يصل في 5 دقائق [DriverName]",
                            BodyEn = "[DriverName] will arrive in 5 min",
                            IsDeleted = false,
                            NotificationName = 1,
                            TitleAr = "وجدنا سائق لك",
                            TitleEn = "We found driver for you"
                        },
                        new
                        {
                            Id = 2,
                            BodyAr = "في انتظارك ، تأكد من مقابلته قبل 5 دقائق لتجنب أي رسوم إضافية [DriverName]",
                            BodyEn = "[DriverName] waiting for you,Be sure to meet him before 5 min to avoid any extra fees",
                            IsDeleted = false,
                            NotificationName = 2,
                            TitleAr = "وصل السائق الخاص بك",
                            TitleEn = "Your driver has arrived"
                        },
                        new
                        {
                            Id = 3,
                            BodyAr = "نأسف جدًا لذلك، يمكنك العثور على سائق  اخر أو تغيير رحلتك",
                            BodyEn = "we are very sorry for this, you can find other drivers or change your trip",
                            IsDeleted = false,
                            NotificationName = 3,
                            TitleAr = "السائق قام بالغاء الرحلة",
                            TitleEn = "Your driver cancelled trip"
                        },
                        new
                        {
                            Id = 4,
                            BodyAr = "تم تحصيل  [Amount] ريال سعودي من محفظتك بسبب تغيير أجرة رحلتك",
                            BodyEn = "Your have been charged with [Amount] SAR from your wallet because your trip fare changed",
                            IsDeleted = false,
                            NotificationName = 4,
                            TitleAr = "ريال سعودي مسحوب من محفظتك [Amount]",
                            TitleEn = "[Amount] SAR withdrawn from your wallet"
                        },
                        new
                        {
                            Id = 5,
                            BodyAr = "قام المستخدم بإلغاء الرحلة. لا تقلق لن نفرض عليك رسوم.",
                            BodyEn = "The user has cancelled the trip. Don't worry we won't charge you.",
                            IsDeleted = false,
                            NotificationName = 5,
                            TitleAr = "تم إلغاء الرحلة",
                            TitleEn = "Trip has been canceled"
                        },
                        new
                        {
                            Id = 6,
                            BodyAr = "يرجى إكمال المعلومات للتسجيل معنا في تاكسي 24",
                            BodyEn = "Please complete the information to register with us at Taxi 24",
                            IsDeleted = false,
                            NotificationName = 6,
                            TitleAr = "عملية التسجيل لم تكتمل",
                            TitleEn = "Registration Process not complete"
                        },
                        new
                        {
                            Id = 7,
                            BodyAr = "يرجى إكمال المعلومات للتسجيل معنا في تاكسي 24",
                            BodyEn = "مرحبًا [DriverName]، للأسف تم رفض بعض مستنداتك، يرجى إعادة إرسالها لمواصلة تسجيلك.",
                            IsDeleted = false,
                            NotificationName = 7,
                            TitleAr = "عملية التسجيل لم تكتمل",
                            TitleEn = "يرجى إعادة تقديم المستندات المرفوضة"
                        });
                });

            modelBuilder.Entity("Taxi24.Core.Entity.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("ApplicationPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("CancelledReason")
                        .HasColumnType("longtext");

                    b.Property<int?>("CarId")
                        .HasColumnType("int");

                    b.Property<int?>("CarSeatType")
                        .HasColumnType("int");

                    b.Property<int?>("CardId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreationUser")
                        .HasColumnType("int");

                    b.Property<string>("CustomerNote")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("DepitFromWalletAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<double?>("DistanceKM")
                        .HasColumnType("double");

                    b.Property<DateTime?>("DriverAcceptOrderDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DriverArriveTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DriverId")
                        .HasColumnType("int");

                    b.Property<string>("DriverNote")
                        .HasColumnType("longtext");

                    b.Property<decimal>("DriverPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("DriverRate")
                        .HasColumnType("int");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTrip")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ErrorInRegistreToWsl")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsCharged")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRegisterdInWsl")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ModificationUser")
                        .HasColumnType("int");

                    b.Property<int?>("OrderPaymentStatus")
                        .HasColumnType("int");

                    b.Property<int?>("PromoCodeId")
                        .HasColumnType("int");

                    b.Property<string>("RiderMobileNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("RiderName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("StartTrip")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TaxPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("TripId")
                        .HasColumnType("longtext");

                    b.Property<int?>("UserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("UserRate")
                        .HasColumnType("int");

                    b.Property<decimal?>("WaitingPrice")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("CardId");

                    b.HasIndex("DriverId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PromoCodeId");

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.OrderPaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("OrderPaymentMethod");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.OrderTemp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreationUser")
                        .HasColumnType("int");

                    b.Property<int>("DistanceInKM")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("DurationPriceFamily")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DurationPriceSedan")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("FamilyCarPrice")
                        .HasColumnType("double");

                    b.Property<string>("FamilyCarPriceKM")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ModificationUser")
                        .HasColumnType("int");

                    b.Property<int?>("PromoCodeId")
                        .HasColumnType("int");

                    b.Property<double>("SedanCarPrice")
                        .HasColumnType("double");

                    b.Property<string>("SedanCarPriceKM")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("StartPrice")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PromoCodeId");

                    b.HasIndex("UserId");

                    b.ToTable("OrderTemp");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethod");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cash"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Credit"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Wallet"
                        },
                        new
                        {
                            Id = 4,
                            Name = "CashWallet"
                        },
                        new
                        {
                            Id = 5,
                            Name = "CreditWallet"
                        });
                });

            modelBuilder.Entity("Taxi24.Core.Entity.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreationUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ModificationUser")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "Driver",
                            IsDeleted = false,
                            IsSystem = false,
                            NameAr = "Driver",
                            NameEn = "Driver"
                        },
                        new
                        {
                            Id = 2,
                            Code = "delete_driver",
                            IsDeleted = false,
                            IsSystem = false,
                            NameAr = "Delete Driver",
                            NameEn = "Delete Driver",
                            ParentId = 1
                        },
                        new
                        {
                            Id = 3,
                            Code = "approve_documents",
                            IsDeleted = false,
                            IsSystem = false,
                            NameAr = "Approve ,  Reject Documents",
                            NameEn = "Approve ,  Reject Documents",
                            ParentId = 1
                        },
                        new
                        {
                            Id = 4,
                            Code = "users",
                            IsDeleted = false,
                            IsSystem = false,
                            NameAr = "Users",
                            NameEn = "Users"
                        },
                        new
                        {
                            Id = 5,
                            Code = "activate_deactivate_users",
                            IsDeleted = false,
                            IsSystem = false,
                            NameAr = "Activate , DeActivate User",
                            NameEn = "Activate , DeActivate User",
                            ParentId = 4
                        },
                        new
                        {
                            Id = 6,
                            Code = "users_delete",
                            IsDeleted = false,
                            IsSystem = false,
                            NameAr = "Delete User",
                            NameEn = "Delete User",
                            ParentId = 4
                        },
                        new
                        {
                            Id = 7,
                            Code = "users_edit",
                            IsDeleted = false,
                            IsSystem = false,
                            NameAr = "Edit User",
                            NameEn = "Edit User",
                            ParentId = 4
                        },
                        new
                        {
                            Id = 8,
                            Code = "users_details",
                            IsDeleted = false,
                            IsSystem = false,
                            NameAr = "Details User",
                            NameEn = "Details User",
                            ParentId = 4
                        },
                        new
                        {
                            Id = 9,
                            Code = "trips",
                            IsDeleted = false,
                            IsSystem = false,
                            NameAr = "Trips",
                            NameEn = "Trips"
                        },
                        new
                        {
                            Id = 10,
                            Code = "trips_details",
                            IsDeleted = false,
                            IsSystem = false,
                            NameAr = "Trips Details",
                            NameEn = "Trips Details",
                            ParentId = 9
                        },
                        new
                        {
                            Id = 11,
                            Code = "notifications",
                            IsDeleted = false,
                            IsSystem = false,
                            NameAr = "Notifications",
                            NameEn = "Notifications"
                        },
                        new
                        {
                            Id = 12,
                            Code = "notifications",
                            IsDeleted = false,
                            IsSystem = false,
                            NameAr = "Notification Send",
                            NameEn = "Notification Send",
                            ParentId = 12
                        },
                        new
                        {
                            Id = 13,
                            Code = "delete_notifications",
                            IsDeleted = false,
                            IsSystem = false,
                            NameAr = "Notifications Delete",
                            NameEn = "Notifications Delete"
                        },
                        new
                        {
                            Id = 14,
                            Code = "promo_code",
                            IsDeleted = false,
                            IsSystem = false,
                            NameAr = "Promo Codes",
                            NameEn = "Promo Codes"
                        },
                        new
                        {
                            Id = 15,
                            Code = "promo_code_add",
                            IsDeleted = false,
                            IsSystem = false,
                            NameAr = "Promo Code Add",
                            NameEn = "Promo Code Add",
                            ParentId = 14
                        },
                        new
                        {
                            Id = 16,
                            Code = "promo_code_delete",
                            IsDeleted = false,
                            IsSystem = false,
                            NameAr = "Promo Code Delete",
                            NameEn = "Promo Code Delete",
                            ParentId = 14
                        },
                        new
                        {
                            Id = 17,
                            Code = "activate_deactivate_promoCode",
                            IsDeleted = false,
                            IsSystem = false,
                            NameAr = "Promo Code Activate ,Deactivate",
                            NameEn = "Promo Code Activate ,Deactivate",
                            ParentId = 14
                        },
                        new
                        {
                            Id = 18,
                            Code = "transactions",
                            IsDeleted = false,
                            IsSystem = false,
                            NameAr = "Transactions",
                            NameEn = "Transactions"
                        },
                        new
                        {
                            Id = 19,
                            Code = "settings",
                            IsDeleted = false,
                            IsSystem = false,
                            NameAr = "settings",
                            NameEn = "settings"
                        },
                        new
                        {
                            Id = 20,
                            Code = "support",
                            IsDeleted = false,
                            IsSystem = false,
                            NameAr = "Support",
                            NameEn = "Support"
                        },
                        new
                        {
                            Id = 21,
                            Code = "wallets",
                            IsDeleted = false,
                            IsSystem = false,
                            NameAr = "Wallets",
                            NameEn = "Wallets"
                        },
                        new
                        {
                            Id = 22,
                            Code = "group",
                            IsDeleted = false,
                            IsSystem = true,
                            NameAr = "Groups",
                            NameEn = "Groups"
                        },
                        new
                        {
                            Id = 23,
                            Code = "group_add",
                            IsDeleted = false,
                            IsSystem = true,
                            NameAr = "Groups Add",
                            NameEn = "Groups Add",
                            ParentId = 22
                        },
                        new
                        {
                            Id = 24,
                            Code = "group_edit",
                            IsDeleted = false,
                            IsSystem = true,
                            NameAr = "Groups Edit",
                            NameEn = "Groups Edit",
                            ParentId = 22
                        },
                        new
                        {
                            Id = 25,
                            Code = "group_delete",
                            IsDeleted = false,
                            IsSystem = true,
                            NameAr = "Groups Delete",
                            NameEn = "Groups Delete",
                            ParentId = 22
                        },
                        new
                        {
                            Id = 26,
                            Code = "users_add",
                            IsDeleted = false,
                            IsSystem = true,
                            NameAr = "Add User",
                            NameEn = "Add User",
                            ParentId = 4
                        },
                        new
                        {
                            Id = 27,
                            Code = "cars",
                            IsDeleted = false,
                            IsSystem = false,
                            NameAr = "Cars",
                            NameEn = "Cars"
                        },
                        new
                        {
                            Id = 28,
                            Code = "Approve , Reject documents",
                            IsDeleted = false,
                            IsSystem = false,
                            NameAr = "Approve , Reject documents",
                            NameEn = "Approve , Reject documents",
                            ParentId = 27
                        },
                        new
                        {
                            Id = 29,
                            Code = "car_details",
                            IsDeleted = false,
                            IsSystem = false,
                            NameAr = "Car Details",
                            NameEn = "Car Details",
                            ParentId = 27
                        },
                        new
                        {
                            Id = 30,
                            Code = "driver_details",
                            IsDeleted = false,
                            IsSystem = false,
                            NameAr = "Driver Details",
                            NameEn = "Driver Details",
                            ParentId = 1
                        },
                        new
                        {
                            Id = 31,
                            Code = "dashboard",
                            IsDeleted = false,
                            IsSystem = false,
                            NameAr = "dashboard",
                            NameEn = "dashboard"
                        },
                        new
                        {
                            Id = 32,
                            Code = "isAdmin",
                            IsDeleted = false,
                            IsSystem = true,
                            NameAr = "isAdmin",
                            NameEn = "isAdmin"
                        });
                });

            modelBuilder.Entity("Taxi24.Core.Entity.Photos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreationUser")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ModificationUser")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.Point", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreationUser")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("Lat")
                        .HasColumnType("double");

                    b.Property<double>("Lng")
                        .HasColumnType("double");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ModificationUser")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("PlaceId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SecondaryText")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Point");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.PromoCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreationUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ModificationUser")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<int>("PriceType")
                        .HasColumnType("int");

                    b.Property<int>("PromoCodeStatus")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PromoCode");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.Rider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreationUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ModificationUser")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Rider");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "User"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Driver"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "SubAdmin"
                        });
                });

            modelBuilder.Entity("Taxi24.Core.Entity.Support", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreationUser")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ModificationUser")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Support");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("CardNumber")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreationUser")
                        .HasColumnType("int");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ModificationUser")
                        .HasColumnType("int");

                    b.Property<string>("RequestHash")
                        .HasColumnType("longtext");

                    b.Property<string>("TrackId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TransId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("WalletActionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WalletActionId")
                        .IsUnique();

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.TripSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SettingsType")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("TripSetting");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "kilometerPrice",
                            SettingsType = 0,
                            Value = "5"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "WaitingPrice",
                            SettingsType = 0,
                            Value = "5"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "PassangerCancellationPrice",
                            SettingsType = 0,
                            Value = "5"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "DriverCancellationPrice",
                            SettingsType = 0,
                            Value = "5"
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Name = "ApplicationPrice",
                            SettingsType = 0,
                            Value = "5"
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            Name = "SedanCarPriceForkilometer",
                            SettingsType = 0,
                            Value = "1"
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            Name = "FamilyCarPriceForkilometer",
                            SettingsType = 0,
                            Value = "2"
                        });
                });

            modelBuilder.Entity("Taxi24.Core.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CancelTripCount")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreationUser")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DateOfBirthHijri")
                        .HasColumnType("longtext");

                    b.Property<string>("DeviceToken")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("IdentityNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Language")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ModificationUser")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<bool>("PasswordReset")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("longtext");

                    b.Property<string>("ProfileImageState")
                        .HasColumnType("longtext");

                    b.Property<byte[]>("Salt")
                        .HasColumnType("longblob");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.UserPermissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreationUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ModificationUser")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPermissions");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.Wallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ModificationUser")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("WalletNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Wallet");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.WalletActions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("CardNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ModificationUser")
                        .HasColumnType("int");

                    b.Property<string>("TrackId")
                        .HasColumnType("longtext");

                    b.Property<int>("TransferAction")
                        .HasColumnType("int");

                    b.Property<int>("WalletActionType")
                        .HasColumnType("int");

                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.Property<int?>("WalletId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("WalletId");

                    b.HasIndex("WalletId1");

                    b.ToTable("WalletActions");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.Account", b =>
                {
                    b.HasOne("Taxi24.Core.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.Car", b =>
                {
                    b.HasOne("Taxi24.Core.Entity.User", "CarInssuranceModifiedUser")
                        .WithMany()
                        .HasForeignKey("CarInssuranceModifiedBy");

                    b.HasOne("Taxi24.Core.Entity.User", "CarRegistrationModifiedUser")
                        .WithMany()
                        .HasForeignKey("CarRegistrationModifiedBy");

                    b.HasOne("Taxi24.Core.Entity.Driver", "Driver")
                        .WithMany("Cars")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CarInssuranceModifiedUser");

                    b.Navigation("CarRegistrationModifiedUser");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.Card", b =>
                {
                    b.HasOne("Taxi24.Core.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.Driver", b =>
                {
                    b.HasOne("Taxi24.Core.Entity.User", "LicenseModifiedUser")
                        .WithMany()
                        .HasForeignKey("LicenseStatusBy");

                    b.HasOne("Taxi24.Core.Entity.User", "SaudiIdModifiedUser")
                        .WithMany()
                        .HasForeignKey("SaudiIdModifiedBy");

                    b.HasOne("Taxi24.Core.Entity.User", "User")
                        .WithOne("Driver")
                        .HasForeignKey("Taxi24.Core.Entity.Driver", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LicenseModifiedUser");

                    b.Navigation("SaudiIdModifiedUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.Favirote", b =>
                {
                    b.HasOne("Taxi24.Core.Entity.User", "User")
                        .WithMany("Favirotes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.GroupPermissions", b =>
                {
                    b.HasOne("Taxi24.Core.Entity.Group", "Group")
                        .WithMany("GroupPermissions")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Taxi24.Core.Entity.Permission", "Permission")
                        .WithMany("GroupPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.Location", b =>
                {
                    b.HasOne("Taxi24.Core.Entity.User", "User")
                        .WithMany("Locations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.Notification", b =>
                {
                    b.HasOne("Taxi24.Core.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.NotificationMessages", b =>
                {
                    b.HasOne("Taxi24.Core.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.Order", b =>
                {
                    b.HasOne("Taxi24.Core.Entity.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId");

                    b.HasOne("Taxi24.Core.Entity.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId");

                    b.HasOne("Taxi24.Core.Entity.Driver", "Driver")
                        .WithMany("Orders")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Taxi24.Core.Entity.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("Taxi24.Core.Entity.PromoCode", "PromoCode")
                        .WithMany("Orders")
                        .HasForeignKey("PromoCodeId");

                    b.HasOne("Taxi24.Core.Entity.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Card");

                    b.Navigation("Driver");

                    b.Navigation("Location");

                    b.Navigation("PromoCode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.OrderPaymentMethod", b =>
                {
                    b.HasOne("Taxi24.Core.Entity.Order", "Order")
                        .WithMany("OrderPaymentMethods")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Taxi24.Core.Entity.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.OrderTemp", b =>
                {
                    b.HasOne("Taxi24.Core.Entity.PromoCode", "PromoCode")
                        .WithMany()
                        .HasForeignKey("PromoCodeId");

                    b.HasOne("Taxi24.Core.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PromoCode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.Permission", b =>
                {
                    b.HasOne("Taxi24.Core.Entity.Permission", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.Photos", b =>
                {
                    b.HasOne("Taxi24.Core.Entity.Car", null)
                        .WithMany("Photos")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Taxi24.Core.Entity.Point", b =>
                {
                    b.HasOne("Taxi24.Core.Entity.Order", "Order")
                        .WithMany("Points")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.PromoCode", b =>
                {
                    b.HasOne("Taxi24.Core.Entity.User", "User")
                        .WithMany("PromoCodes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.Rider", b =>
                {
                    b.HasOne("Taxi24.Core.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.Support", b =>
                {
                    b.HasOne("Taxi24.Core.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.Transaction", b =>
                {
                    b.HasOne("Taxi24.Core.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Taxi24.Core.Entity.WalletActions", "WalletActions")
                        .WithOne()
                        .HasForeignKey("Taxi24.Core.Entity.Transaction", "WalletActionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");

                    b.Navigation("WalletActions");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.User", b =>
                {
                    b.HasOne("Taxi24.Core.Entity.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.UserPermissions", b =>
                {
                    b.HasOne("Taxi24.Core.Entity.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Taxi24.Core.Entity.User", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.UserRole", b =>
                {
                    b.HasOne("Taxi24.Core.Entity.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Taxi24.Core.Entity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.Wallet", b =>
                {
                    b.HasOne("Taxi24.Core.Entity.User", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("Taxi24.Core.Entity.Wallet", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.WalletActions", b =>
                {
                    b.HasOne("Taxi24.Core.Entity.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Taxi24.Core.Entity.Wallet", "Wallet")
                        .WithMany()
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Taxi24.Core.Entity.Wallet", null)
                        .WithMany("Actions")
                        .HasForeignKey("WalletId1");

                    b.Navigation("Account");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.Car", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.Driver", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.Group", b =>
                {
                    b.Navigation("GroupPermissions");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.Order", b =>
                {
                    b.Navigation("OrderPaymentMethods");

                    b.Navigation("Points");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.Permission", b =>
                {
                    b.Navigation("Childs");

                    b.Navigation("GroupPermissions");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.PromoCode", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Taxi24.Core.Entity.User", b =>
                {
                    b.Navigation("Driver")
                        .IsRequired();

                    b.Navigation("Favirotes");

                    b.Navigation("Locations");

                    b.Navigation("Orders");

                    b.Navigation("PromoCodes");

                    b.Navigation("UserPermissions");

                    b.Navigation("UserRoles");

                    b.Navigation("Wallet")
                        .IsRequired();
                });

            modelBuilder.Entity("Taxi24.Core.Entity.Wallet", b =>
                {
                    b.Navigation("Actions");
                });
#pragma warning restore 612, 618
        }
    }
}
